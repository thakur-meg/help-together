type Comments {
  created_at: DateTime
  id: ID!
  post_id: ID
  text: String
  username: String
}

type Post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  tags_id: ID
  tags: [Tags]
    @materializer(
      query: "getTagsListById"
      arguments: [{name: "id", field: "tags_id"}]
    )
  votes: [Votes]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{name: "post_id", field: "id"}]
    )
  comments: [Comments]
    @materializer (
      query: "getCommentsByPostId"
      arguments: [{name: "post_id", field: "id"}]
    )
  title: String
  username: String
}

type Tags {
  created_at: DateTime
  id: ID!
  topic: String
}

type Votes {
  created_at: DateTime
  id: ID!
  post_id: ID
  username: String
  votes: Boolean
}

type Query {
  getCommentsList: [Comments]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comments"
      configuration: "postgresql_config"
    )
  """
  This query is an example of how to simply paginate your responses.
  """
  getPaginatedCommentsList(first: Int!, after: Int!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comments" limit $1 offset $2
      """
      configuration: "postgresql_config"
    )
  """
  In this example, a single query parameter is passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentsByPostId(post_id: ID!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comments" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getTagsListById(id: ID!): [Tags]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "tags" where "id" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [Votes]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "votes" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  """
  In this example, two query parameters are passed. If the request to the DB will
  return at most one value you can remove the square brackets from the result.
  """
  getCommentsByPost_idAndUsername(post_id: ID!, username: String!): [Comments]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "public"."comments" where "post_id" = $1 and "username" = $2
      """
      configuration: "postgresql_config"
    )
  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
    getPostListByTopic(topic: String!) : [Post]
      @dbquery (
        type: "postgresql"
      query: """
        select * , "post".id as id from "post"
        join "tags" on "tags"."id" = "post"."tags_id"
        where "tags"."topic" = $1
        order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
      )
      
    getPostListByPostId(post_id: ID!) : Post
      @dbquery (
        type: "postgresql"
      query: """
        select * from "post"
        where "post"."id" =$1

      """
      configuration: "postgresql_config"
      )

  getTagsList: [Tags]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "tags"
      configuration: "postgresql_config"
    )
  getTagsListByTopic(topic: String!): [Tags]
    @dbquery(
      type: "postgresql"
      query: """
        select * from "tags" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getVotesList: [Votes]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "votes"
      configuration: "postgresql_config"
    )
  
}

type Mutation {
  """
  In this mutation example you can see how to do a mutation to insert data in the database.
  """
  insertPost(
    image: String!
    tags_id: ID!
    body: String
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertTag(topic: String): Tags 
    @dbquery(
      type: "postgresql"
      table: "tags"
      dml: INSERT
      configuration: "postgresql_config"
    )

  """
  In this mutation example you can see how to do a mutation to delete data from the database.
  """
  deletePost(
    image: String!
    created_at: DateTime!
    id: ID!
    tags_id: ID!
    body: String!
    title: String!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
